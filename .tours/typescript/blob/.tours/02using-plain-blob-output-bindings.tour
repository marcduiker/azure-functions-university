{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "TypeScript Blob - 02. Using plain Blob output bindings",
  "steps": [
    {
      "title": "Overview",
      "description": "In this exercise, we will create a HTTP-triggered Function and extend it with a Blob _output binding_ in order to write a `Player` JSON object to a `players/out` path in the Blob storage.\r\n\r\nBefore you start, make sure that you have the Storage emulator up and running: \r\n>> azurite -s -l C:\\Users\\<Your_Name>\\azurite-storage -d C:\\Users\\<Your_Name>\\azurite-storage\\debug.log"
    },
    {
      "title": "Creation of Function App",
      "description": "Create a new HTTP Trigger Function App via the Azure Functions extension with the following settings:\r\n   1. Location: *AzureFunctions.Blob*\r\n   2. Language: *TypeScript*\r\n   3. Template: *HTTP trigger*\r\n   4. Function name: *StorePlayerWithBlobOutput*\r\n   5. AccessRights: *Function*\r\n\r\nAfter the Function App is created, execute \r\n\r\n>> npm install\r\n\r\nto install the required dependencies."
    },
    {
      "file": "../../../src/typescript/AzureFunctions.Blob/Exercise2PlainBlobOutputBindings/function.json",
      "title": "Adjusting function.json - Restriction to POST requests",
      "selection": {
        "start": {
          "line": 8,
          "character": 7
        },
        "end": {
          "line": 10,
          "character": 8
        }
      },
      "description": "We want to support POST requests only, so we remove the `\"get\"` from the array of support HTTP methods."
    },
    {
      "file": "../../../src/typescript/AzureFunctions.Blob/Exercise2PlainBlobOutputBindings/function.json",
      "title": "Adjusting function.json - Adding the Blob output binding",
      "selection": {
        "start": {
          "line": 12,
          "character": 5
        },
        "end": {
          "line": 17,
          "character": 7
        }
      },
      "description": "We add a new output binding that consists of the following parts:\r\n\r\n- The attribute `\"name\"` defines the name that we use to address the bound object in your `index.ts` file.\r\n- The attribute `\"type\"`   specifies the binding type, in our case the Blob binding.\r\n- The attribute `\"path\"` tells the binding which path to use to store the blob. It consists of  the  name of the container (`player`), the directory (`out`) and the file name (`players/out/stored-input.json`).\r\n- The attribute `\"direction\"` defines the   binding direction, in this case an output binding.\r\n"
    },
    {
      "title": "Adjusting the Function Code - Adding some basic variables",
      "file": "../../../src/typescript/AzureFunctions.Blob/Exercise2PlainBlobOutputBindings/index.ts",
      "selection": {
        "start": {
          "line": 9,
          "character": 1
        },
        "end": {
          "line": 11,
          "character": 1
        }
      },
      "description": "Next we implement the Azure Function to write the Blob.\r\n\r\nFirst we Add some variables for the HTTP response object namely for teh status code and the response message."
    },
    {
      "title": "Adjusting the Function Code - Adding decision logic if body was supplied",
      "file": "../../../src/typescript/AzureFunctions.Blob/Exercise2PlainBlobOutputBindings/index.ts",
      "selection": {
        "start": {
          "line": 12,
          "character": 5
        },
        "end": {
          "line": 12,
          "character": 20
        }
      },
      "description": "We must distinguish the cases if we receive a body in our POST request or not. So we have some basic `if-else` logic depending on the fact if a body was contained in the request.\r\n\r\n > ðŸ”Ž **Observation** - For the sake of this lesson, we leave out any further checks on the JSON object in the body of the request. In real life scenarios you certainly must place further validations in place to make sure that you store valid data."
    },
    {
      "title": "Adjusting the Function Code - Implementing the error case",
      "file": "../../../src/typescript/AzureFunctions.Blob/Exercise2PlainBlobOutputBindings/index.ts",
      "selection": {
        "start": {
          "line": 20,
          "character": 9
        },
        "end": {
          "line": 21,
          "character": 64
        }
      },
      "description": "When the request does not contain a body, we return the corresponding information to the caller."
    },
    {
      "title": "Adjusting the Function Code - Implementing the data transfer to the output binding",
      "file": "../../../src/typescript/AzureFunctions.Blob/Exercise2PlainBlobOutputBindings/index.ts",
      "selection": {
        "start": {
          "line": 14,
          "character": 9
        },
        "end": {
          "line": 14,
          "character": 47
        }
      },
      "description": "In case we receive a body we store the JSON body in the Blob storage. As we put in place the output binding, this is straightforward, as we just need to transfer the JSON object in the body to the binding available via the Function context."
    },
    {
      "title": "Adjusting the Function Code - Adding the response data for the success case",
      "file": "../../../src/typescript/AzureFunctions.Blob/Exercise2PlainBlobOutputBindings/index.ts",
      "selection": {
        "start": {
          "line": 16,
          "character": 8
        },
        "end": {
          "line": 17,
          "character": 65
        }
      },
      "description": "We complete the `if`-case by adding the corresponding response information, namely the status code and the response message."
    },
    {
      "title": "Adjusting the Function Code - Transferring data to the response object",
      "file": "../../../src/typescript/AzureFunctions.Blob/Exercise2PlainBlobOutputBindings/index.ts",
      "selection": {
        "start": {
          "line": 25,
          "character": 5
        },
        "end": {
          "line": 28,
          "character": 6
        }
      },
      "description": "Finally we add the response information in the corresponding object of the Function context."
    },
    {
      "title": "Local Configuration - Add Storage emulator",
      "file": "../../../src/typescript/AzureFunctions.Blob/local.settings.json",
      "selection": {
        "start": {
          "line": 4,
          "character": 28
        },
        "end": {
          "line": 4,
          "character": 56
        }
      },
      "description": "Before we start the Function, we must configure that it uses the local storage emulator via the setting `\"UseDevelopmentStorage=true\"`."
    },
    {
      "title": "Start the Function",
      "file": "../../../src/typescript/AzureFunctions.Blob/Exercise2PlainBlobOutputBindings/index.ts",
      "selection": {
        "start": {
          "line": 1,
          "character": 1
        },
        "end": {
          "line": 32,
          "character": 27
        }
      },
      "description": "Now it is time to start the Function (make sure that Azurite is up and running):\r\n \r\n 1. Install the dependencies first via \r\n>> npm install\r\n 2. Run the Function via \r\n>> npm run start\r\n"
    },
    {
      "title": "Execute the POST request",
      "file": "../../../test/typescript/blob/bloboutput.http",
      "selection": {
        "start": {
          "line": 2,
          "character": 1
        },
        "end": {
          "line": 13,
          "character": 2
        }
      },
      "description": "Now call the Function via a POST request and check if something has been stored in your Blob storage."
    }
  ]
}